apiVersion: karo.io/v1alpha1
kind: AlertReaction
metadata:
  name: critical-service-alert-reaction
  namespace: default
spec:
  # The basic alert name to match
  alertName: "ServiceDown"
  
  # Additional matchers for fine-grained control using Prometheus-style operators
  matchers:
    # Match alerts with severity label equal to "critical"
    - name: severity
      operator: "="
      value: critical
    
    # Match alerts for specific services using regex
    - name: service
      operator: "=~"
      value: "web-server|api-gateway|database"
    
    # Match alerts where the runbook annotation contains "emergency"
    - name: annotations.runbook
      operator: "=~"
      value: ".*emergency.*"
  
  # Actions to perform when all matchers are satisfied
  actions:
    - name: "send-notification"
      image: "curlimages/curl:latest"
      command: ["curl"]
      args:
        - "-X"
        - "POST"
        - "-H"
        - "Content-Type: application/json"
        - "-d"
        - '{"text":"Critical service alert triggered for {{ .Labels.service }} on {{ .Labels.instance }}"}'
        - "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    
    - name: "restart-service"
      image: "bitnami/kubectl:latest"
      command: ["kubectl"]
      args:
        - "rollout"
        - "restart"
        - "deployment/{{ .Labels.service }}"
        - "-n"
        - "production"
      serviceAccountName: "alertreaction-restart-sa"

---
apiVersion: karo.io/v1alpha1
kind: AlertReaction
metadata:
  name: memory-threshold-reaction
  namespace: monitoring
spec:
  alertName: "HighMemoryUsage"
  
  # Match only when memory usage is above 90% in production, excluding test instances
  matchers:
    # Check if the value annotation contains a percentage > 90
    - name: annotations.value
      operator: "=~"
      value: "9[0-9]\\.[0-9]+%|100%"
    
    # Match only production environment
    - name: environment
      operator: "="
      value: production
    
    # Exclude test instances
    - name: instance
      operator: "!~"
      value: ".*test.*|.*staging.*"
  
  actions:
    - name: "scale-up"
      image: "bitnami/kubectl:latest"
      command: ["kubectl"]
      args:
        - "scale"
        - "deployment/{{ .Labels.deployment }}"
        - "--replicas=5"
        - "-n"
        - "{{ .Labels.namespace }}"
      serviceAccountName: "alertreaction-scale-sa"