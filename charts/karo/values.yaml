# Default values for karo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Operator image configuration
image:
  repository: docker.io/dudizimber/karo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Image pull secrets for private registries
imagePullSecrets: []

# Operator deployment configuration
replicaCount: 1

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  fsGroup: 65532

# Security context for the container
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

# Operator configuration
operator:
  # Leader election
  leaderElection:
    enabled: true
  
  # Webhook configuration
  webhook:
    port: 9090
    
  # Metrics configuration  
  metrics:
    port: 8080
    enabled: true
    
  # Health check configuration
  health:
    port: 8081

# Service configuration
service:
  # Webhook service
  webhook:
    type: ClusterIP
    port: 9090
    annotations: {}
    
  # Metrics service
  metrics:
    type: ClusterIP
    port: 8080
    annotations: {}

# Ingress configuration for webhook
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: karo.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: karo-tls
  #    hosts:
  #      - karo.local

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 128Mi
  requests:
    cpu: 10m
    memory: 64Mi

# Autoscaling configuration (generally not needed for operators)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Liveness probe configuration
livenessProbe:
  httpGet:
    path: /healthz
    port: health
  initialDelaySeconds: 15
  periodSeconds: 20
  timeoutSeconds: 1
  failureThreshold: 3

# Readiness probe configuration
readinessProbe:
  httpGet:
    path: /readyz
    port: health
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

# Termination grace period
terminationGracePeriodSeconds: 10

# RBAC configuration
rbac:
  # Whether to create RBAC resources
  create: true

# CRD installation
crds:
  # Whether to install CRDs
  install: true
  # Whether to keep CRDs on uninstall
  keep: false

# Monitoring configuration
monitoring:
  # Create ServiceMonitor for Prometheus monitoring
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    annotations: {}
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    
  # Create PrometheusRule for alerting
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    annotations: {}
    rules: []
    
# Additional labels to apply to all resources
commonLabels: {}

# Additional annotations to apply to all resources  
commonAnnotations: {}

# Environment variables for the operator
env: []
  # - name: LOG_LEVEL
  #   value: "info"
  # - name: WEBHOOK_CERT_DIR
  #   value: "/tmp/k8s-webhook-server/serving-certs"

# Extra volumes
extraVolumes: []
  # - name: webhook-certs
  #   secret:
  #     secretName: webhook-certs

# Extra volume mounts
extraVolumeMounts: []
  # - name: webhook-certs
  #   mountPath: /tmp/k8s-webhook-server/serving-certs
  #   readOnly: true

# Args for the operator container (leader-elect and webhook-port are handled separately)
args: []
  # - --some-additional-arg
