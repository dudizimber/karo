#!/bin/bash

# Pre-commit Git hook for Karo (Kubernetes Alert Reaction Operator)
# This hook runs formatting, linting, and basic checks before allowing commits

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}🔍 Running pre-commit checks...${NC}"

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# Get list of staged Go files
staged_go_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -z "$staged_go_files" ]; then
    echo -e "${YELLOW}ℹ️  No Go files staged for commit${NC}"
    exit 0
fi

echo -e "${GREEN}📝 Found staged Go files:${NC}"
echo "$staged_go_files"
echo

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to run a command and handle errors
run_check() {
    local cmd="$1"
    local description="$2"
    
    echo -e "${GREEN}🔄 $description...${NC}"
    
    if eval "$cmd"; then
        echo -e "${GREEN}✅ $description passed${NC}"
        return 0
    else
        echo -e "${RED}❌ $description failed${NC}"
        return 1
    fi
}

# Check for required tools
echo -e "${GREEN}🔧 Checking for required tools...${NC}"

required_tools=("go" "gofmt")
for tool in "${required_tools[@]}"; do
    if ! command_exists "$tool"; then
        echo -e "${RED}❌ Required tool '$tool' is not installed${NC}"
        exit 1
    fi
done

# Check for golangci-lint (optional but recommended)
if command_exists "golangci-lint"; then
    HAS_GOLANGCI_LINT=true
    echo -e "${GREEN}✅ golangci-lint found${NC}"
else
    HAS_GOLANGCI_LINT=false
    echo -e "${YELLOW}⚠️  golangci-lint not found, skipping advanced linting${NC}"
fi

echo

# 1. Run gofmt to check formatting
echo -e "${GREEN}🎨 Checking Go formatting...${NC}"
unformatted_files=$(gofmt -l $staged_go_files)
if [ -n "$unformatted_files" ]; then
    echo -e "${RED}❌ The following files are not properly formatted:${NC}"
    echo "$unformatted_files"
    echo -e "${YELLOW}💡 Run 'gofmt -w <files>' or 'make fmt' to fix formatting${NC}"
    exit 1
else
    echo -e "${GREEN}✅ All files are properly formatted${NC}"
fi

# 2. Run go vet
if ! run_check "go vet ./..." "Go vet analysis"; then
    echo -e "${YELLOW}💡 Run 'go vet ./...' or 'make vet' to see detailed issues${NC}"
    exit 1
fi

# 3. Run golangci-lint if available
if [ "$HAS_GOLANGCI_LINT" = true ]; then
    if ! run_check "golangci-lint run --timeout=5m" "golangci-lint analysis"; then
        echo -e "${YELLOW}💡 Run 'golangci-lint run' to see detailed issues${NC}"
        exit 1
    fi
fi

# 4. Check if go.mod and go.sum are up to date
echo -e "${GREEN}📦 Checking Go modules...${NC}"
if ! run_check "go mod tidy && git diff --exit-code go.mod go.sum" "Go modules consistency"; then
    echo -e "${YELLOW}💡 Run 'go mod tidy' to fix module dependencies${NC}"
    exit 1
fi

# 5. Build check
if ! run_check "go build ./..." "Go build"; then
    echo -e "${YELLOW}💡 Fix build errors before committing${NC}"
    exit 1
fi

# 6. Quick test run (only for staged files if possible)
echo -e "${GREEN}🧪 Running quick tests...${NC}"
if ! go test -short ./... >/dev/null 2>&1; then
    echo -e "${YELLOW}⚠️  Some tests are failing. Consider running 'make test' before committing.${NC}"
    echo -e "${YELLOW}💡 Continuing with commit, but please address test failures.${NC}"
else
    echo -e "${GREEN}✅ Quick tests passed${NC}"
fi

echo
echo -e "${GREEN}🎉 All pre-commit checks passed! Proceeding with commit...${NC}"