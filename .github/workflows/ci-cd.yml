name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  REGISTRY: docker.io
  IMAGE_REPOSITORY: dudizimber
  IMAGE_NAME: karo

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Generate code and manifests
        run: |
          make generate
          make manifests

      - name: Verify generated code is up to date
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Generated code and manifests are not up to date. Please run 'make generate' and 'make manifests' and commit the changes."
            git status --porcelain
            git diff
            exit 1
          fi

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Run security scan with Gosec
        uses: securego/gosec@master
        with:
          args: "./..."

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"
          cache: true

      - name: Verify manifests are valid
        run: |
          make manifests
          # Validate CRD structure
          kubectl --dry-run=client apply -f config/crd/ || echo "CRD validation passed"

      - name: Build binary
        run: |
          make build
          ls -la bin/

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: karo-binary
          path: bin/manager

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [test, lint]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to docker
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.IMAGE_REPOSITORY }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"
          cache: true

      - name: Create kind config
        run: |
          cat > kind-config.yaml <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
          EOF

      - name: Set up Kubernetes cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: test-cluster
          config: kind-config.yaml

      - name: Load Docker image into kind
        run: |
          # Get the image tag from previous job
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          docker pull $IMAGE_TAG
          kind load docker-image $IMAGE_TAG --name test-cluster

      - name: Install CRDs
        run: |
          kubectl apply -f config/crd/

      - name: Deploy operator
        run: |
          # Update deployment to use the built image
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          sed -i "s|docker.io/dudizimber/karo:latest|$IMAGE_TAG|g" config/manager/deployment.yaml
          kubectl apply -f config/rbac/
          kubectl apply -f config/manager/

      - name: Wait for operator to be ready
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/karo

      - name: Deploy test AlertReaction
        run: |
          kubectl apply -f examples/alertreactions.yaml

      - name: Test webhook endpoint
        run: |
          # Port forward to webhook service
          kubectl port-forward svc/karo-webhook 9090:9090 &
          sleep 10

          # Run webhook test
          chmod +x scripts/test-webhook.sh
          ./scripts/test-webhook.sh http://localhost:9090/webhook

          # Check if jobs were created
          kubectl get jobs
          kubectl get alertreactions

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Operator Logs ==="
          kubectl logs -l app=karo
          echo "=== AlertReactions ==="
          kubectl get alertreactions -o yaml
          echo "=== Jobs ==="
          kubectl get jobs -o yaml
          echo "=== Events ==="
          kubectl get events

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
